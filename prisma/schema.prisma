// This is your Prisma schema template file
// The actual schema.prisma is generated from this template based on environment

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  
  // Performance Cycle Information
  jobTitle            String?
  seniorityLevel      String?
  performanceFeedback String?
  
  accounts        Account[]
  sessions        Session[]
  snippets           WeeklySnippet[]
  integrations       Integration[]
  performanceAssessments PerformanceAssessment[]
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model WeeklySnippet {
  id          String   @id @default(cuid())
  userId      String
  weekNumber  Int
  year        Int      // Add year field
  startDate   DateTime // Monday
  endDate     DateTime // Friday
  content     String
  
  // AI-enhanced fields (JSON stored as strings for compatibility)
  extractedTasks    String? // JSON string
  extractedMeetings String? // JSON string
  aiSuggestions String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, year, weekNumber])
  @@map("weekly_snippets")
}

model PerformanceAssessment {
  id               String   @id @default(cuid())
  userId           String
  cycleName        String
  startDate        DateTime
  endDate          DateTime
  generatedDraft   String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("performance_assessments")
}

model Integration {
  id           String    @id @default(cuid())
  userId       String
  type         String    // 'google_calendar', 'todoist', etc.
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean @default(true)
  lastSyncAt   DateTime?
  metadata     String @default("{}")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, type])
  @@map("integrations")
}