// This is your Prisma schema template file
// The actual schema.prisma is generated from this template based on environment

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  
  // Performance Cycle Information
  jobTitle            String?
  seniorityLevel      String?
  performanceFeedback String?
  onboardingCompletedAt DateTime?
  
  // Career Progression Plan
  careerProgressionPlan    String?   // Generated plan for current level
  nextLevelExpectations    String?   // Expectations for next level  
  companyCareerLadder      String?   // Optional company-provided ladder
  careerPlanGeneratedAt    DateTime? // Track when plan was created
  careerPlanLastUpdated    DateTime? // Track manual edits
  
  accounts        Account[]
  sessions        Session[]
  snippets           WeeklySnippet[]
  integrations       Integration[]
  integrationData    IntegrationData[]
  integrationConsolidations IntegrationConsolidation[]
  performanceAssessments PerformanceAssessment[]
  asyncOperations      AsyncOperation[]
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model WeeklySnippet {
  id          String   @id @default(cuid())
  userId      String
  weekNumber  Int
  year        Int      // Add year field
  startDate   DateTime // Monday
  endDate     DateTime // Friday
  content     String
  
  // AI-enhanced fields (JSON stored as strings for compatibility)
  extractedTasks    String? // JSON string
  extractedMeetings String? // JSON string
  aiSuggestions String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, year, weekNumber])
  @@map("weekly_snippets")
}

model PerformanceAssessment {
  id               String   @id @default(cuid())
  userId           String
  cycleName        String
  startDate        DateTime
  endDate          DateTime
  generatedDraft   String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("performance_assessments")
}

model Integration {
  id           String    @id @default(cuid())
  userId       String
  type         String    // 'google_calendar', 'todoist', etc.
  accessToken  String?
  refreshToken String?
  expiresAt    DateTime?
  isActive     Boolean @default(true)
  lastSyncAt   DateTime?
  metadata     String @default("{}")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, type])
  @@map("integrations")
}

model AsyncOperation {
  id                String    @id @default(cuid())
  userId            String
  operationType     String    // 'career_plan_generation', 'weekly_analysis', etc.
  status            String    // 'queued', 'processing', 'completed', 'failed'
  progress          Int       @default(0) // 0-100
  inputData         String?
  resultData        String?
  errorMessage      String?
  createdAt         DateTime  @default(now())
  startedAt         DateTime?
  completedAt       DateTime?
  estimatedDuration Int?      // seconds
  metadata          String      @default("{}")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, operationType, status])
  @@index([status, createdAt])
  @@map("async_operations")
}

model CareerGuidelineTemplate {
  id                    String   @id @default(cuid())
  role                  String   // 'engineering', 'product', 'design', 'data'
  level                 String   // 'junior', 'mid', 'senior', 'staff', 'principal', etc.
  currentLevelPlan      String   // Detailed guidelines for current level
  nextLevelExpectations String   // Expectations for next level
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([role, level], name: "role_level")
  @@map("career_guideline_templates")
}

model IntegrationData {
  id          String   @id @default(cuid())
  userId      String
  weekNumber  Int
  year        Int
  integrationType String
  rawData     String
  metadata    String?
  createdAt   DateTime @default(now())
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, weekNumber, year, integrationType])
  @@map("integration_data")
}

model IntegrationConsolidation {
  id               String   @id @default(cuid())
  userId           String
  integrationType  String   // 'google_calendar', 'todoist', etc.
  weekNumber       Int
  year             Int
  weekStart        DateTime
  weekEnd          DateTime
  
  // Raw data storage
  rawData          String   // JSON blob of original integration data
  
  // LLM-processed consolidation
  consolidatedSummary    String   // High-level narrative summary
  keyInsights           String   // Important themes/patterns (JSON)
  consolidatedMetrics   String   // Quantified data (JSON: meeting hours, task counts, etc.)
  consolidatedContext   String   // Contextual information for reflection generation (JSON)
  
  // Processing metadata
  consolidationPrompt   String?  // Prompt used for consolidation
  llmModel             String?  // Model version used
  processingStatus     String   @default("pending") // pending, processing, completed, failed
  processingError      String?
  
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  consolidatedAt   DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, integrationType, year, weekNumber])
  @@index([userId, weekStart])
  @@map("integration_consolidations")
}