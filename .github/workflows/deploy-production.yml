name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PROJECT_ID: advanceweekly-prod
  GOOGLE_OAUTH_CLIENT_ID: ${{ secrets.GOOGLE_OAUTH_CLIENT_ID }}
  SERVICE_NAME: advanceweekly
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate using Workload Identity Federation (more secure than service account keys)
      # This requires the workload identity pool and provider to be set up in Google Cloud
      # Run ./scripts/setup-workload-identity.sh to configure if not already done
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          workload_identity_provider: projects/926387508050/locations/global/workloadIdentityPools/github-actions-pool/providers/github-actions-provider
          service_account: github-actions-sa@advanceweekly-prod.iam.gserviceaccount.com

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker for Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev

      - name: Submit build to Cloud Build
        run: |
          gcloud builds submit \
            --config=cloudbuild.yaml \
            --project=$PROJECT_ID

      - name: Update OAuth redirect URIs
        run: |
          # Use the simplified OAuth fix script
          ./scripts/fix-oauth-uris.sh
        env:
          GOOGLE_OAUTH_CLIENT_ID: ${{ env.GOOGLE_OAUTH_CLIENT_ID }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          REGION: ${{ env.REGION }}

      - name: Verify deployment
        run: |
          # Get the service URL
          SERVICE_URL=$(gcloud run services describe $SERVICE_NAME \
            --region=$REGION \
            --project=$PROJECT_ID \
            --format="value(status.url)")
          
          echo "Service deployed to: $SERVICE_URL"
          
          # Wait for service to be ready
          sleep 10
          
          # Check if service is responding
          if curl -f -s -o /dev/null "$SERVICE_URL"; then
            echo "✅ Service is responding successfully!"
          else
            echo "❌ Service health check failed"
            exit 1
          fi