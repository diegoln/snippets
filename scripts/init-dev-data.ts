#!/usr/bin/env npx tsx

/**
 * Initialize development database with Jack's integration data
 * This script populates only the data that would come from integrations:
 * - User profile and career guidelines
 * - Calendar integration setup
 * - Empty reflection slots (content generated by LLM at runtime)
 */

import { PrismaClient } from '@prisma/client'
import { getCurrentWeekNumber } from '../lib/week-utils'
import { getWeekDates } from '../lib/utils'

const prisma = new PrismaClient()

async function initializeDevData() {
  console.log('üöÄ Initializing development database with Jack\'s data...\n')

  try {
    // 1. Create or update Jack's user account
    console.log('1Ô∏è‚É£ Creating Jack Thompson user...')
    const jack = await prisma.user.upsert({
      where: { email: 'jack@company.com' },
      update: {
        name: 'Jack Thompson',
        jobTitle: 'Senior Software Engineer',
        seniorityLevel: 'Senior',
        onboardingCompletedAt: new Date()
      },
      create: {
        id: '1',
        email: 'jack@company.com',
        name: 'Jack Thompson',
        jobTitle: 'Senior Software Engineer',
        seniorityLevel: 'Senior',
        onboardingCompletedAt: new Date()
      }
    })
    console.log(`‚úÖ User created: ${jack.name} (${jack.email})\n`)

    // 2. Update Jack's career guidelines directly on user
    console.log('2Ô∏è‚É£ Updating career guidelines...')
    await prisma.user.update({
      where: { id: jack.id },
      data: {
        careerProgressionPlan: `As a Senior Software Engineer:
- Lead technical design and implementation of complex features
- Mentor junior developers and conduct code reviews
- Identify and resolve architectural issues
- Collaborate with cross-functional teams
- Drive best practices and technical standards`,
        nextLevelExpectations: `To reach Staff Engineer level:
- Demonstrate technical leadership across multiple teams
- Drive architectural decisions at the platform level
- Influence engineering culture and practices
- Lead critical, high-impact projects
- Build deep expertise in key technical domains`,
        companyCareerLadder: 'Internal engineering career ladder document',
        careerPlanGeneratedAt: new Date()
      }
    })
    console.log('‚úÖ Career guidelines updated\n')

    // 3. Create Google Calendar integration
    console.log('3Ô∏è‚É£ Setting up Google Calendar integration...')
    const integration = await prisma.integration.upsert({
      where: {
        userId_type: {
          userId: jack.id,
          type: 'google_calendar'
        }
      },
      update: {
        isActive: true,
        lastSyncAt: new Date()
      },
      create: {
        userId: jack.id,
        type: 'google_calendar',
        accessToken: 'mock-token-dev',
        refreshToken: null,
        expiresAt: null,
        metadata: JSON.stringify({
          status: 'mock',
          note: 'Development mock integration with Jack\'s realistic calendar data'
        }),
        isActive: true,
        lastSyncAt: new Date()
      }
    })
    console.log('‚úÖ Google Calendar integration connected\n')

    // 4. Create empty weekly reflection entries (content will be generated by LLM at runtime)
    console.log('4Ô∏è‚É£ Creating weekly reflection entries for the past 4 weeks...')
    const currentWeek = getCurrentWeekNumber()
    const currentYear = new Date().getFullYear()
    
    // Create empty reflection entries that would exist from calendar integration
    // The actual reflection content will be generated by LLM when user requests it
    const weekNumbers = [currentWeek - 3, currentWeek - 2, currentWeek - 1, currentWeek]

    for (const weekNumber of weekNumbers) {
      const { startDate, endDate } = getWeekDates(weekNumber, currentYear)
      
      await prisma.weeklySnippet.upsert({
        where: {
          userId_year_weekNumber: {
            userId: jack.id,
            year: currentYear,
            weekNumber: weekNumber
          }
        },
        update: {
          startDate: new Date(startDate),
          endDate: new Date(endDate),
          // Keep existing content if any, don't overwrite
        },
        create: {
          userId: jack.id,
          weekNumber: weekNumber,
          year: currentYear,
          content: '', // Empty - will be populated by LLM from calendar data
          startDate: new Date(startDate),
          endDate: new Date(endDate)
        }
      })
      console.log(`‚úÖ Created reflection entry for week ${weekNumber}`)
    }
    console.log()

    // 5. Create dev user for testing
    console.log('5Ô∏è‚É£ Creating dev test user...')
    const devUser = await prisma.user.upsert({
      where: { email: 'dev@example.com' },
      update: {},
      create: {
        id: 'dev-user-123',
        email: 'dev@example.com',
        name: 'Dev User',
        jobTitle: 'Software Engineer',
        seniorityLevel: 'Senior Software Engineer',
        onboardingCompletedAt: null
      }
    })
    console.log(`‚úÖ Dev user ready: ${devUser.email}\n`)

    console.log('üéâ Development database initialized successfully!')
    console.log('üìä Summary:')
    console.log('   - 1 user with complete profile (Jack Thompson)')
    console.log('   - 4 weekly reflection slots (empty, ready for LLM generation)')
    console.log('   - 1 Google Calendar integration with realistic mock data')
    console.log('   - 1 dev user for testing\n')
    console.log('üöÄ You can now:')
    console.log('   - View Jack\'s dashboard and generate reflections from calendar data')
    console.log('   - Generate performance assessments from his reflections')
    console.log('   - Reset and test onboarding flow with realistic calendar data')
    
  } catch (error) {
    console.error('‚ùå Error initializing dev data:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

// Run if called directly
initializeDevData()