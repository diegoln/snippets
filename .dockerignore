# Docker ignore file - excludes files from Docker build context

# Node.js (will be installed in container)
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Next.js build output (will be built in container)
.next/
out/

# Environment files (secrets handled via Secret Manager)
.env*
!.env.example

# Logs and temporary files
*.log
logs/
server.log
*.tmp
*.temp
build.log
*.tsbuildinfo

# Database files (production uses Cloud SQL)
*.db
*.sqlite
*.sqlite3
prisma/dev.db

# Mock datasets (dev/test only)
data/mock-datasets/

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# Git
.git/
.gitignore

# Gemini Code Review
.gemini/

# Test files and coverage
coverage/
.nyc_output/
__tests__/
*.test.js
*.test.ts
*.test.tsx
jest.config.js
jest.setup.js

# Documentation
*.md
docs/
architecture.md

# Development tools
docker-compose.yml
terraform/
aws-lambda/

# Scripts not needed in container (except schema generation and staging)
deploy*.sh
quick-deploy.sh
get-docker.sh
scripts/init-dev-data.ts  # Dev-specific, but init-staging-data.ts should be included
scripts/oauth-*.sh
scripts/setup-*.sh
scripts/update-*.sh
scripts/verify-*.sh
scripts/deep-*.sh

# IMPORTANT: Keep staging-related files for production deployment
# These files are needed for staging functionality:
# - lib/mock-users.ts (used in staging)
# - lib/integration-mock-data.ts (used in staging)  
# - lib/environment.ts (used for staging detection)
# - scripts/init-staging-data.ts (needed for staging data reset)
# - middleware.ts (needed for /staging path detection)

# Alternative Dockerfiles
Dockerfile.simple
Dockerfile.prod
Dockerfile.optimized

# Performance optimization artifacts
.next/cache/
.next/schema-cache.json

# Cloud Build files (not needed in container)
cloudbuild.yaml
.gcloudignore